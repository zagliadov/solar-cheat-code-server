// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// ******* vercel */
// datasource db {
//   provider  = "postgresql"
//   url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }
// ******* local */
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// ******** Supabase
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     String                   @id @default(cuid())
  firstName              String?
  lastName               String?
  email                  String                   @unique
  hash                   String
  salt                   String
  image                  String?
  backgroundImage        String?                  @db.Text
  account                Account?
  subscriptions          Subscription[]           @relation("UserSubscriptions")
  Video                  Video[]
  VideoEngagement        VideoEngagement[]
  Announcement           Announcement[]
  AnnouncementEngagement AnnouncementEngagement[]
  followers              FollowEngagement[]       @relation("Followings")
  followings             FollowEngagement[]       @relation("Followers")
  Playlist               Playlist[]
  commentId              String?
  Comment                Comment?
}

model Account {
  id                String  @id @default(cuid())
  ownerId           String  @unique
  owner             User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  isBlockingEnabled Boolean
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation("UserSubscriptions", fields: [userId], references: [id], onDelete: Cascade)
  type      String
  price     String
  startDate DateTime @default(now())
  endDate   DateTime
  isActive  Boolean  @default(true)
}

model Video {
  id               String             @id @default(cuid())
  title            String?            @db.Text
  thumbnailUrl     String?            @db.Text
  description      String?            @db.Text
  videoUrl         String?            @db.Text
  publish          Boolean            @default(true)
  userId           String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments         Comment[]
  playlists        PlaylistHasVideo[]
  videoEngagements VideoEngagement[]

  @@index([userId])
}

model VideoEngagement {
  id             String         @id @default(cuid())
  userId         String?        @unique
  videoId        String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  engagementType EngagementType
  user           User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  video          Video          @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([videoId])
}

model Playlist {
  id          String             @id @default(cuid())
  title       String             @db.Text
  description String?            @db.Text
  userId      String             @unique
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  user        User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  videos      PlaylistHasVideo[]

  @@index([userId])
}

model PlaylistHasVideo {
  id         String    @id @default(cuid())
  playlistId String
  videoId    String
  playlist   Playlist? @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  video      Video?    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([playlistId, videoId])
  @@index([playlistId])
  @@index([videoId])
}

model Comment {
  id        String   @id @default(cuid())
  message   String   @db.Text
  videoId   String   @unique
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id])

  @@index([videoId])
  @@index([userId])
}

model Announcement {
  id                      String                   @id @default(cuid())
  message                 String                   @db.Text
  userId                  String                   @unique
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  user                    User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcementEngagements AnnouncementEngagement[]

  @@index([userId])
}

model AnnouncementEngagement {
  userId         String         @unique
  engagementType EngagementType
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  announcementId String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcement   Announcement   @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@id([userId, announcementId])
  @@index([announcementId])
  @@index([userId])
}

model FollowEngagement {
  followerId     String
  followingId    String
  engagementType EngagementType
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  following      User           @relation("Followings", fields: [followingId], references: [id], onDelete: Cascade)
  follower       User           @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

enum EngagementType {
  LIKE
  DISLIKE
  SAVE
  FOLLOW
  VIEW
}
